#summary How to do iPhone unit testing
#labels Phase-Deploy,Featured

= Introduction =

This is a quick tutorial on doing iPhone unit testing using the facilities in the Google Toolbox For Mac. Please send mail to [http://groups.google.com/group/google-toolbox-for-mac the group] if any clarification is required. 

= Basic Project Setup =
Hopefully your project already has an application target for building something for the iPhone.
  # Create a new iPhone Target (Cocoa Touch Application) via "Project Menu > New Target...". Choose a name that makes some sense such as "Unit Test".
  # Add `google-toolbox-for-mac/UnitTesting/GTMIPhoneUnitTestMain.m` to your target
  # Add `google-toolbox-for-mac/UnitTesting/GTMIPhoneUnitTestDelegate.m` to your target
  # Add `google-toolbox-for-mac/UnitTesting/GTMIPhoneUnitTestDelegate.h` to your target
  # Add `google-toolbox-for-mac/UnitTesting/GTMSenTestCase.m` to your target
  # Add `google-toolbox-for-mac/UnitTesting/GTMSenTestCase.h` to your target
  # Add `google-toolbox-for-mac/GTMDefines.h` to your target
  # Add a new 'run script' build phase as the last step of your target build via "Project Menu > New Build Phase > New Run Script Build Phase", and dragging it to the end of the build steps if needed.
  # Edit your Run Script Build Phase by double clicking it, and set the script to `"PATH_TO_GTM/UnitTesting/RunIPhoneUnitTest.sh"`, where PATH_TO_GTM is the path to your local version of google-toolbox-for-mac.

Your target should now build cleanly, and if you check the build log you should see something like:
"Executed 0 tests, with 0 failures (0 unexpected) in 0.001 (0.001) seconds" at the end.

= Creating a unit test =
  # Add the source you want to test to your target. For example if you want to test class Foo, make sure to add Foo.h and Foo.m to your target.
  # Add a new unit test file to your target via "File > New File" and choose "Objective-C test case class" from the "Mac OS X" Cocoa category. Call it `FooTest.m`, or follow whatever convention your project has for naming test classes.
  # In `FooTest.h`, change `#import <SenTestingKit/SenTestingKit.h>` to `#import "GTMSenTestCase.h"`
  # Add test cases as you normally would. See [http://developer.apple.com/tools/unittest.html Apple's Documentation] for a good tutorial on how to test in Objective C. The key is that your test case methods are declared `- (void)testBar`. The name must start with "test" and they must return nothing and have no arguments.
 
Now when you build your target you should now see test cases executing.

= Notes =
  * I find that having a .h for my tests to be mostly useless, and tend to just move my interface for my tests in with my implementation so I only have one file to worry about.
  * Make sure to check out the extra ST macros that we have added in `GTMSenTestCase.h` that go above and beyond the set included with the default OCUnit.
  * You can't run the build script while the iPhone simulator is running. Make sure to quit the simulator, or else you will get the following error: `Couldn't register PurpleSystemEventPort with the bootstrap server. Error: unknown error code. This generally means that another instance of this process was already running or is hung in the debugger.`

= Advanced Stuff =

== Unit test Logging ==
When Unittesting is done correctly, you often have a lot of log messages logging because you are testing edge cases that you may not expect to hit in the real world very often. It's nice to be able to verify that the log messages you are receiving as you run your tests are the ones that you expect to receive. You can do this in GTM by enabling unit test logging.

  # Assuming you are using `_GTMDevLog` to do your logging,`#define _GTMDevLog _GTMUnittestDevLog` somewhere, either in target settings, or in your prefix. If you are using NSLog you can just define it to be `_GTMUnittestDevLog`.
  # Add `google-toolbox-for-mac/DebugUtils/GTMDevLog.m` to your target.
  # Add `google-toolbox-for-mac/UnitTesting/GTMUnitTestDevLog.m` to your target.
  # Add `google-toolbox-for-mac/Foundation/GTMRegex.m` to your target.
  # You may also need to add some headers depending on your search paths

Now when you build all of the logging that you do via your unit tests will get checked to make sure that it conforms with your expectations. You set up these expectations before running your tests using `[GTMUnitTestDevLog expect*]` methods. See `GTMUnitTestDevLog.h` for more info.

== UI and State Testing ==
GTM can also help you test your UI's representation and state.

  # Add `google-toolbox-for-mac/UnitTesting/GTMNSObject+UnitTesting.m` to your target.
  # Add `google-toolbox-for-mac/UnitTesting/GTMUIKit+UnitTesting.m` to your target.
  # Add `google-toolbox-for-mac/UnitTesting/GTMCALayer+UnitTesting.m` to your target.
  # Add `google-toolbox-for-mac/Foundation/GTMSystemVersion.m` to your target.
  # Add the `CoreGraphics` and `QuartzCore` frameworks to your target.
  # You may also need to add some headers depending on your search paths

Check out `GTMUIKit+UnitTestingTest.m` or `GTMNSBezierPath+RoundRectTest.m` for examples of using` UIUnitTesting`.

For more information on some of this, check out CodeVerificationAndUnitTesting. Hope this helps.